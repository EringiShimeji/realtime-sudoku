// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sudoku/auth/v1/auth.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "sudoku/gen/sudoku/auth/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "sudoku.auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceSignInProcedure is the fully-qualified name of the AuthService's SignIn RPC.
	AuthServiceSignInProcedure = "/sudoku.auth.v1.AuthService/SignIn"
	// AuthServiceSignOutProcedure is the fully-qualified name of the AuthService's SignOut RPC.
	AuthServiceSignOutProcedure = "/sudoku.auth.v1.AuthService/SignOut"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor       = v1.File_sudoku_auth_v1_auth_proto.Services().ByName("AuthService")
	authServiceSignInMethodDescriptor  = authServiceServiceDescriptor.Methods().ByName("SignIn")
	authServiceSignOutMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("SignOut")
)

// AuthServiceClient is a client for the sudoku.auth.v1.AuthService service.
type AuthServiceClient interface {
	// ログインセッションの付与はここではなく callback で行う
	SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error)
	SignOut(context.Context, *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error)
}

// NewAuthServiceClient constructs a client for the sudoku.auth.v1.AuthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		signIn: connect.NewClient[v1.SignInRequest, v1.SignInResponse](
			httpClient,
			baseURL+AuthServiceSignInProcedure,
			connect.WithSchema(authServiceSignInMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		signOut: connect.NewClient[v1.SignOutRequest, v1.SignOutResponse](
			httpClient,
			baseURL+AuthServiceSignOutProcedure,
			connect.WithSchema(authServiceSignOutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	signIn  *connect.Client[v1.SignInRequest, v1.SignInResponse]
	signOut *connect.Client[v1.SignOutRequest, v1.SignOutResponse]
}

// SignIn calls sudoku.auth.v1.AuthService.SignIn.
func (c *authServiceClient) SignIn(ctx context.Context, req *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// SignOut calls sudoku.auth.v1.AuthService.SignOut.
func (c *authServiceClient) SignOut(ctx context.Context, req *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error) {
	return c.signOut.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the sudoku.auth.v1.AuthService service.
type AuthServiceHandler interface {
	// ログインセッションの付与はここではなく callback で行う
	SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error)
	SignOut(context.Context, *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceSignInHandler := connect.NewUnaryHandler(
		AuthServiceSignInProcedure,
		svc.SignIn,
		connect.WithSchema(authServiceSignInMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceSignOutHandler := connect.NewUnaryHandler(
		AuthServiceSignOutProcedure,
		svc.SignOut,
		connect.WithSchema(authServiceSignOutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sudoku.auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceSignInProcedure:
			authServiceSignInHandler.ServeHTTP(w, r)
		case AuthServiceSignOutProcedure:
			authServiceSignOutHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sudoku.auth.v1.AuthService.SignIn is not implemented"))
}

func (UnimplementedAuthServiceHandler) SignOut(context.Context, *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sudoku.auth.v1.AuthService.SignOut is not implemented"))
}
