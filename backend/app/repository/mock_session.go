// Code generated by MockGen. DO NOT EDIT.
// Source: session.go
//
// Generated by this command:
//
//	mockgen -source=session.go -destination=mock_session.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	model "sudoku/model"

	uuid "github.com/google/uuid"
	mo "github.com/samber/mo"
	gomock "go.uber.org/mock/gomock"
)

// MockISessionRepository is a mock of ISessionRepository interface.
type MockISessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISessionRepositoryMockRecorder
}

// MockISessionRepositoryMockRecorder is the mock recorder for MockISessionRepository.
type MockISessionRepositoryMockRecorder struct {
	mock *MockISessionRepository
}

// NewMockISessionRepository creates a new mock instance.
func NewMockISessionRepository(ctrl *gomock.Controller) *MockISessionRepository {
	mock := &MockISessionRepository{ctrl: ctrl}
	mock.recorder = &MockISessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionRepository) EXPECT() *MockISessionRepositoryMockRecorder {
	return m.recorder
}

// DeleteExpired mocks base method.
func (m *MockISessionRepository) DeleteExpired() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpired")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpired indicates an expected call of DeleteExpired.
func (mr *MockISessionRepositoryMockRecorder) DeleteExpired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpired", reflect.TypeOf((*MockISessionRepository)(nil).DeleteExpired))
}

// FindByID mocks base method.
func (m *MockISessionRepository) FindByID(id uuid.UUID) (mo.Option[*model.Session], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(mo.Option[*model.Session])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockISessionRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockISessionRepository)(nil).FindByID), id)
}

// Save mocks base method.
func (m *MockISessionRepository) Save(session *model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockISessionRepositoryMockRecorder) Save(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockISessionRepository)(nil).Save), session)
}
