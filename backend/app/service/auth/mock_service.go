// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_service.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// OAuthCallback mocks base method.
func (m *MockIAuthService) OAuthCallback(arg0 OAuthCallbackInput) (OAuthCallbackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuthCallback", arg0)
	ret0, _ := ret[0].(OAuthCallbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OAuthCallback indicates an expected call of OAuthCallback.
func (mr *MockIAuthServiceMockRecorder) OAuthCallback(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuthCallback", reflect.TypeOf((*MockIAuthService)(nil).OAuthCallback), arg0)
}

// SignIn mocks base method.
func (m *MockIAuthService) SignIn(arg0 SignInInput) (SignInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0)
	ret0, _ := ret[0].(SignInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockIAuthServiceMockRecorder) SignIn(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockIAuthService)(nil).SignIn), arg0)
}

// SignOut mocks base method.
func (m *MockIAuthService) SignOut(arg0 SignOutInput) (SignOutOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", arg0)
	ret0, _ := ret[0].(SignOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOut indicates an expected call of SignOut.
func (mr *MockIAuthServiceMockRecorder) SignOut(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockIAuthService)(nil).SignOut), arg0)
}

// ValidateSession mocks base method.
func (m *MockIAuthService) ValidateSession(arg0 ValidateSessionInput) (ValidateSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSession", arg0)
	ret0, _ := ret[0].(ValidateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSession indicates an expected call of ValidateSession.
func (mr *MockIAuthServiceMockRecorder) ValidateSession(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSession", reflect.TypeOf((*MockIAuthService)(nil).ValidateSession), arg0)
}

// MockOAuthClient is a mock of OAuthClient interface.
type MockOAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthClientMockRecorder
}

// MockOAuthClientMockRecorder is the mock recorder for MockOAuthClient.
type MockOAuthClientMockRecorder struct {
	mock *MockOAuthClient
}

// NewMockOAuthClient creates a new mock instance.
func NewMockOAuthClient(ctrl *gomock.Controller) *MockOAuthClient {
	mock := &MockOAuthClient{ctrl: ctrl}
	mock.recorder = &MockOAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthClient) EXPECT() *MockOAuthClientMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method.
func (m *MockOAuthClient) GetAccessToken(code, redirectURI string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", code, redirectURI)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockOAuthClientMockRecorder) GetAccessToken(code, redirectURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockOAuthClient)(nil).GetAccessToken), code, redirectURI)
}

// MockGitHubAPI is a mock of GitHubAPI interface.
type MockGitHubAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubAPIMockRecorder
}

// MockGitHubAPIMockRecorder is the mock recorder for MockGitHubAPI.
type MockGitHubAPIMockRecorder struct {
	mock *MockGitHubAPI
}

// NewMockGitHubAPI creates a new mock instance.
func NewMockGitHubAPI(ctrl *gomock.Controller) *MockGitHubAPI {
	mock := &MockGitHubAPI{ctrl: ctrl}
	mock.recorder = &MockGitHubAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubAPI) EXPECT() *MockGitHubAPIMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockGitHubAPI) GetUser(accessToken string) (*GitHubUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", accessToken)
	ret0, _ := ret[0].(*GitHubUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockGitHubAPIMockRecorder) GetUser(accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockGitHubAPI)(nil).GetUser), accessToken)
}
